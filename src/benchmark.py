import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.metrics import roc_curve, auc

#
# # cm = np.array([
# # [298 , 2   ,  1  , 0   ,  1  , 1   ,3   , 1   ,1   ,0],
# # [  0 , 293 ,  7  , 4   ,  1  , 0   ,5   , 2   ,0   ,0],
# # [  1 , 3   , 263 , 0   ,  8  , 0   ,0   , 3   ,0   ,2],
# # [  1 , 5   ,  0  , 261 ,  4  , 0   ,3   , 2   ,0   ,1],
# # [  0 , 0   ,  10 , 0   ,254  , 3   ,0   ,10   ,2   ,1],
# # [  0 , 4   ,  1  , 1   ,  4  , 300 ,0   , 1   ,0   ,0],
# # [  1 , 3   ,  2  , 0   ,  0  , 0   ,264 , 0   ,7   ,1],
# # [  3 , 5   ,  3  , 1   ,  7  , 1   ,0   , 289 ,1   ,0],
# # [  0 , 1   ,  3  , 13  ,  1  , 0   ,11  , 1   ,289 ,0],
# # [  0 , 6   ,  0  , 1   ,  6  , 1   ,2   , 1   ,4   ,304]])
#
# cm = np.array(
# [[874,  11,  32,  22,   8,   7,   8,   4,  27,   7],
#  [  9, 923,   5,   7,   1,   3,   3,   1,  14,  34],
#  [ 55,   3, 729,  64,  49,  44,  37,  12,   7,   0],
#  [ 24,   4,  64, 649,  52, 113,  60,  18,   6,  11],
#  [ 13,   2,  52,  55, 760,  33,  31,  47,   7,   0],
#  [  7,   1,  41, 160,  23, 719,  17,  22,   3,   7],
#  [  4,   4,  32,  59,  17,  25, 850,   2,   4,   3],
#  [  7,   3,  28,  37,  26,  59,   6, 826,   2,   5],
#  [ 65,  29,  15,  15,   6,   9,   5,   1, 836,  19],
#  [ 21,  64,   6,  12,   4,   4,   6,   3,  19, 861]] )
#

def f1_score(cm):
    tp = np.diag(cm)
    fp = np.array([sum(cm[:,i])-cm[i,i] for i in range(10)])
    fn = np.array([sum(cm[i,:])-cm[i,i] for i in range(10)])
    tn = np.array(sum(sum(cm[:,:]))-fp-fn-tp)

    print(sum(sum(cm[:,:])))
    print('tp',tp)
    print('fp',fp)
    print('fn',fn)
    print('tn',tn)

    acc = (tp+tn)/(tp+tn+fp+fn)
    recall = tp/(tp+fn)
    precision = tp/(tp+fp)
    pre_micro = sum(tp)/sum(tp+fp)
    pre_macro = np.mean(precision)
    f1 = 2*tp/(2*tp+fn+fp)

    tpr = tp/(tp+fn)
    fpr = fp/(tn+fp)
    # Matthew's correlation coefficient
    mcc = (tp*tn - fp*fn)/ \
        np.sqrt( np.dot(np.dot(np.dot(tp+fp,tp+fn), tn+fp), tn+fn) )

    print('acc',acc)
    print('recall',recall)
    print('precision', precision)
    print('pre_micro', pre_micro)
    print('pre_macro', pre_macro)
    print('tpr', tpr)
    print('fpr', fpr)
    print('f1',f1)
    print('mcc', mcc)


# actual= np.array(
# [3, 8, 8, 0, 6, 6, 1, 3, 5, 7, 0, 8, 9, 6, 1, 9, 7, 5, 8, 0,
# 9, 7, 9, 2, 4, 6, 5, 0, 4, 4, 6, 5, 6, 5, 5, 9, 4, 5, 6, 6,
# 0, 9, 4, 2, 1, 9, 3, 7, 9, 6, 9, 8, 3, 8, 0, 7, 4, 7, 7, 3,
# 6, 6, 1, 2, 6, 3, 3, 7, 2, 8, 6, 2, 8, 7, 8, 8, 2, 3, 9, 2,
# 0, 5, 1, 3, 2, 1, 7, 8, 8, 9, 8, 3, 0, 6, 4, 0, 0, 6, 4, 6,
# 6, 5, 3, 1, 1, 7, 6, 8, 3, 7, 3, 1, 2, 2, 6, 4, 0, 4, 0, 7,
# 3, 8, 2, 0, 8, 8, 1, 3, 2, 5, 4, 1, 8, 9, 1, 9, 7, 2, 6, 9,
# 7, 2, 6, 6, 8, 9, 2, 8, 3, 2, 5, 5, 6, 0, 5, 4, 6, 2, 2, 8,
# 6, 9, 1, 5, 0, 4, 8, 4, 5, 0, 9, 8, 9, 3, 0, 9, 9, 2, 9, 3,
# 6, 0, 4, 8, 5, 7, 5, 0, 5, 2, 8, 3, 0, 7, 1, 8, 8, 7, 2, 5,
# 7, 1, 8, 8, 9, 5, 3, 0, 7, 4, 9, 7, 9, 7, 8, 5, 2, 9, 7, 4,
# 0, 6, 3, 8, 1, 6, 9, 4, 7, 6, 5, 1, 8, 0, 4, 5, 8, 0, 5, 5,
# 8, 9, 1, 0, 1, 3, 2, 9, 2, 1, 5, 3, 9, 9, 4, 3, 0, 0, 0, 5,
# 2, 8, 8, 0, 7, 4, 9, 1, 7, 0, 8, 0, 5, 3, 3, 2, 4, 3, 6, 3,
# 9, 6, 9, 0, 1, 0, 7, 9, 1, 2, 9, 0, 6, 3, 6, 3, 6, 2, 1, 8,
# 2, 8, 6, 8, 6, 7, 7, 0, 6, 1, 6, 0, 4, 6, 3, 5, 5, 0, 4, 0,
# 2, 4, 1, 3, 5, 5, 4, 1, 1, 6, 9, 3, 7, 6, 3, 9, 0, 6, 2, 8,
# 7, 8, 5, 6, 4, 5, 8, 6, 2, 2, 0, 7, 9, 9, 1, 0, 8, 2, 3, 8,
# 5, 1, 2, 9, 1, 4, 9, 8, 3, 4, 1, 7, 4, 9, 7, 2, 7, 6, 0, 6,
# 0, 9, 9, 2, 7, 8, 0, 2, 1, 6, 2, 9, 2, 2, 5, 3, 0, 3, 9, 6])
#
#
# predict= np.array(
# [3, 8, 8, 0, 6, 6, 1, 3, 5, 7, 0, 8, 9, 6, 1, 9, 7, 5, 8, 0,
# 9, 7, 9, 3, 3, 6, 4, 0, 4, 4, 6, 5, 6, 4, 5, 9, 4, 3, 6, 6,
# 0, 9, 4, 8, 1, 9, 3, 7, 3, 6, 9, 8, 3, 8, 3, 7, 3, 5, 7, 5,
# 6, 1, 1, 3, 6, 0, 3, 7, 2, 8, 6, 3, 8, 7, 0, 8, 2, 3, 0, 2,
# 0, 5, 1, 3, 2, 1, 3, 8, 8, 9, 8, 6, 0, 6, 4, 0, 0, 6, 4, 6,
# 6, 5, 3, 1, 1, 7, 6, 8, 2, 7, 7, 1, 3, 2, 6, 4, 0, 4, 0, 7,
# 3, 8, 2, 0, 0, 8, 1, 3, 2, 3, 4, 1, 8, 9, 1, 9, 7, 3, 6, 1,
# 7, 2, 6, 6, 8, 9, 2, 8, 3, 5, 5, 5, 3, 0, 5, 4, 4, 2, 2, 8,
# 6, 9, 1, 5, 0, 4, 8, 6, 9, 0, 9, 8, 9, 3, 0, 9, 9, 2, 9, 3,
# 3, 0, 3, 8, 6, 7, 5, 0, 5, 3, 8, 0, 0, 7, 1, 8, 3, 7, 2, 5,
# 7, 1, 8, 8, 9, 5, 3, 0, 3, 4, 7, 7, 9, 7, 0, 5, 2, 9, 7, 4,
# 0, 6, 3, 8, 1, 6, 9, 2, 3, 6, 5, 1, 8, 0, 4, 5, 8, 2, 5, 5,
# 1, 9, 1, 0, 1, 6, 2, 8, 2, 1, 5, 3, 9, 9, 7, 3, 0, 0, 0, 3,
# 2, 2, 8, 0, 6, 4, 9, 1, 7, 0, 8, 0, 2, 5, 2, 2, 5, 3, 6, 3,
# 9, 6, 9, 0, 1, 0, 7, 9, 1, 2, 9, 0, 6, 3, 6, 3, 6, 2, 1, 8,
# 2, 8, 6, 0, 3, 7, 7, 0, 6, 1, 6, 0, 4, 6, 3, 5, 5, 0, 3, 0,
# 2, 7, 1, 5, 5, 5, 4, 1, 1, 6, 9, 1, 7, 6, 3, 9, 2, 6, 2, 8,
# 7, 8, 5, 6, 7, 5, 8, 6, 2, 2, 0, 3, 9, 9, 1, 0, 8, 2, 3, 8,
# 5, 1, 2, 9, 8, 4, 9, 8, 3, 4, 1, 7, 4, 9, 7, 2, 7, 6, 0, 6,
# 2, 9, 9, 5, 7, 0, 0, 2, 1, 6, 2, 9, 7, 5, 5, 3, 0, 3, 9, 6])

def showROC(data):

    actual, predict = data[0], data[1]
    className = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']

    actual_list = [(actual==i).astype(int) for i in range(10)]
    predict_list = [(predict==i).astype(int) for i in range(10)]

    roc_auc, fpr_list, tpr_list = [],[],[]
    for i in range(10):
        fpr, tpr, thresholds = roc_curve(actual_list[i], predict_list[i])
        fpr_list.append(fpr)
        tpr_list.append(tpr)
        roc_auc.append(auc(fpr, tpr))

    plt.title('ROC curve')
    for i in range(10):
        plt.plot(fpr_list[i], tpr_list[i], label=className[i])
    plt.legend()
    plt.xlim([0,1])
    plt.ylim([0,1])
    plt.plot([0,1], [0,1], 'r--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.show()

# showROC([actual, predict])

